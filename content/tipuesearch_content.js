var tipuesearch = {"pages": [{'title': '40823111', 'text': '班級\xa0 設計一甲 \n 座號\xa0 40823111 \n 姓名 許耀中 \n \n', 'tags': '', 'url': '40823111.html'}, {'title': '上課內容', 'text': '', 'tags': '', 'url': '上課內容.html'}, {'title': 'W10-W11', 'text': '程式內容 \n \n', 'tags': '', 'url': 'W10-W11.html'}, {'title': 'python', 'text': '說明如何利用 Python 程式讀取同學修課檔案 \n \n import csv\n \n# read student list\n \nfilename = \'E:/wcm2020/data/tmp/2020_spring_score/2a/2a_list.txt\'\nwith open(filename, encoding="utf-8") as f:\n    content = f.readlines()\n#print(content)\nstudent = [x.strip() for x in content] \n#print(student)\n \n \n# Timestamp, email, 修課名稱, url, score, desp, memo\n# 0, 1, 2, 3, 4, 5, 6\n#total = 0\nall = {}\nwith open(\'y:/2020midterm.csv\', encoding="utf-8") as csv_file:\n    csv_reader = csv.reader(csv_file, delimiter=\',\')\n    #print(csv_reader)\n \n    line_count = 0\n    for row in csv_reader:\n        if line_count == 0:\n            #print(f\'Column names are {", ".join(row)}\')\n            line_count += 1\n        else:\n            student_num = row[1].split("@")[0]\n            #print(student_num)\n            student_score = row[4]\n            #print(student_score)\n            try:\n                all.update({student_num: student_score})\n            except:\n                all.update({student_num: "error"})\n            #print(f\'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.\')\n            #print(f\'\\t{row[4]}\')\n            #total += int(row[4])\n            line_count += 1\n#print(all)\n#print(student)\n \n \nfor i in student:\n     \n    #if i in all:\n        #pass\n    #else:\n        #print(str(i))\n     \n    try:\n        print(i + "\\t" + all[i])\n    except:\n        print(i + "\\t60")\n \n    #print(f\'Processed {line_count} lines.\')\n    #print("平均=" + str(total/line_count)) \n flask 程式一: \n \n \n from flask import Flask\n  \napp = Flask(__name__)\n  \n@app.route(\'/\') \ndef hello_world():\n    return \'Hello, From Flask!\'\n  \nif __name__== \'__main__\': \n    app.run() \n \n Flask 程式二: \n \n rom flask import Flask, render_template\nimport ssl\nimport csv\n  \ncontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\ncontext.load_cert_chain(\'localhost.crt\', \'localhost.key\')\n  \napp = Flask(__name__)\n  \n@app.route(\'/\') \ndef hello_world():\n    return \'Hello, From Flask!\'\n  \n@app.route(\'/ROCflag\')\ndef drawROC():\n    return render_template("ROCflag.html")\n \n@app.route("/midterm")\ndef midterm():\n    # read student list\n \n    filename = \'1a_list.txt\'\n    with open(filename, encoding="utf-8") as f:\n        content = f.readlines()\n    #print(content)\n    student = [x.strip() for x in content] \n    #print(student)\n \n \n    # Timestamp, email, 修課名稱, url, score, desp, memo\n    # 0, 1, 2, 3, 4, 5, 6\n    #total = 0\n    all = {}\n    with open(\'2020midterm.csv\', encoding="utf-8") as csv_file:\n        csv_reader = csv.reader(csv_file, delimiter=\',\')\n        #print(csv_reader)\n \n        line_count = 0\n        for row in csv_reader:\n            if line_count == 0:\n                #print(f\'Column names are {", ".join(row)}\')\n                line_count += 1\n            else:\n                student_num = row[1].split("@")[0]\n                #print(student_num)\n                student_score = row[3]\n                #print(student_score)\n                try:\n                    all.update({student_num: student_score})\n                except:\n                    all.update({student_num: "error"})\n                #print(f\'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.\')\n                #print(f\'\\t{row[4]}\')\n                #total += int(row[4])\n                line_count += 1\n    #print(all)\n    #print(student)\n \n    output = ""\n    for i in student:\n         \n        #if i in all:\n            #pass\n        #else:\n            #print(str(i))\n         \n        try:\n            output += (str(i) + ":  "+ str(all[i]) + " ")\n        except:\n            output += (str(i) + ": no data ")\n         \n    return output\n      \nif __name__== \'__main__\': \n    app.run(ssl_context=context) \n', 'tags': '', 'url': 'python.html'}, {'title': 'W12', 'text': 'PyPDF2 \n', 'tags': '', 'url': 'W12.html'}, {'title': '把1個PDF可以解取幾頁到幾頁', 'text': '\n # pypdf2_ex1.py\nimport os\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\n \npdfReader = PdfFileReader(open("2002_Book_Real-WorldASPNETBuildingAConte.pdf", "rb"))\ninformation = [("WhatIsCMS",18,45)]\n \nfor page in range(len(information)):\n    pdf_writer = PdfFileWriter()\n    start = information[page][1]\n    end = information[page][2]\n    while start<=end:\n        pdf_writer.addPage(pdfReader.getPage(start-1))\n        start+=1\n    if not os.path.exists("./"):\n        os.makedirs(savepath)\n    output_filename = \'{}_{}_page_{}.pdf\'.format(information[page][0],information[page][1], information[page][2])\n    with open(output_filename,\'wb\') as out:\n        pdf_writer.write(out) \n', 'tags': '', 'url': '把1個PDF可以解取幾頁到幾頁.html'}, {'title': '把1個PDF 可以解取多個分段', 'text': '# pypdf2_ex2.py\nimport os\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\n \npdfReader = PdfFileReader(open("Beginning-Git-and-GitHub.pdf", "rb"))\ninformation = [("GitAndGithub",17,105),("GitAndGithub",107,194),("GitAndGithub",196,289)]\n \nfor page in range(len(information)):\n    pdf_writer = PdfFileWriter()\n    start = information[page][1]\n    end = information[page][2]\n    while start<=end:\n        pdf_writer.addPage(pdfReader.getPage(start-1))\n        start+=1\n    if not os.path.exists("./"):\n        os.makedirs(savepath)\n    output_filename = \'{}_{}_page_{}.pdf\'.format(information[page][0],information[page][1], information[page][2])\n    with open(output_filename,\'wb\') as out:\n        pdf_writer.write(out)\n \n', 'tags': '', 'url': '把1個PDF 可以解取多個分段.html'}, {'title': '把PDF結合再一起', 'text': '\n # pypdf2_ex3.py\n# merge several pdf files\nimport sys\nimport PyPDF2\n \npdf_write_object = PyPDF2.PdfFileWriter()\n \n#for i in sys.argv[1:]:\nfor i in ["WhatIsCMS.pdf","InforLifeCycle.pdf","EnterpriseContentManage.pdf"]:\n    pdf_read_object = PyPDF2.PdfFileReader(i)\n    print(\'processing file : \'+ i + \'number of pages : \' +  str(pdf_read_object.numPages))\n    for page in range(pdf_read_object.numPages):\n        pdf_write_object.addPage(pdf_read_object.getPage(page))\n \nfinal_file_object = open(\'2020CMS.pdf\', \'wb\')\npdf_write_object.write(final_file_object)\nfinal_file_object.close() \n \n', 'tags': '', 'url': '把PDF結合再一起.html'}, {'title': 'W13-W15', 'text': '新建虛擬主機(VirtuaBox) \n \n 並下載(Ubuntu) \n \n \n \n 我們一開始是從 get-pip.py 下載pip ，但是我們install是 windows 版的(python w .exe) \n 要改成python.exe \n \n \n ubuntu 安裝內容 \n 第1部 \n \n 第二部 \n \n', 'tags': '', 'url': 'W13-W15.html'}, {'title': 'W16-W17', 'text': 'WSGI \n WSGI，全稱 Web Server Gateway Interface，或者 Python Web Server Gateway Interface ，是為 Python 語言定義的 Web 伺服器和 Web 應用程式或框架之間的一種簡單而通用的介面。 這東西是一個Gateway，也就是閘道器。閘道器的作用就是在協議之間進行轉換。 \n 金鑰 \n python wsgi.py(打開你的Python)，缺少什麼軟件(pip install 軟件名稱) \n \n \n 進入googl\xa0 API\xa0 \xa0download\xa0 \xa0並且進入 \n \n 設定使用者 及網域 和儲存ID及密碼(oauth_scrum.txt) \n \n \n 然後就有了(successful) \n', 'tags': '', 'url': 'W16-W17.html'}, {'title': '加入ssh', 'text': '創建SSH的Key \n (1)利用編輯器進入shell的命令環境 \n (2)輸入指令 \n ssh-keygen -t rsa -b 4096 -C "使用者學號" \n \xa0 \n 在 /y/tmp/key/id_rsa (自己設要放在哪裡)目錄下建立 id_rsa 與 id_rsa.pub 等 private key 與 public key \n \n (3)下載 Putty 工具組 \n 接下來要利用 puttygen.exe\xa0 \n \n load(載入)\xa0\xa0 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式 並且 Save private key \n \n (4)開啟 github settings 中的 SSH and GPD keys \n \n 新建New Key\xa0 把public key的碼放入(用scite 開啟) \n \n (5) 修改啟動的 start.bat 加入下列設定 \n set GIT_HOME=%Disk%:\\portablegit\\bin\\\nset GIT_SSH=%Disk%:\\putty\\plink.exe \n 設定putty \xa0 \n (1)home 下的 .ssh 目錄中的 config 設定檔案為 \n \n # no proxy at home\n#ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p\n# set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup\nProxyCommand y:/putty/plink.exe github.com %h %p\n  \nHost github.com\n    User git\n    Port 22\n    Hostname github.com\n     \n    # for connect.exe need openssh key format\n    #IdentityFile "y:\\home\\.ssh\\id_rsa_mdecourse"\n    # for plink.exe need rsa key format but set under putty github.com session\n    # plink.exe do not need the following setting\n    #IdentityFile "y:\\home\\.ssh\\mdecourse_putty_private.ppk"\n  \n    TCPKeepAlive yes\n    IdentitiesOnly yes \n (2)wcm2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連\xa0 \xa0 \xa0 線 \n [core]\n    repositoryformatversion = 0\n    filemode = false\n    bare = false\n    logallrefupdates = true\n    symlinks = false\n    ignorecase = true\n[submodule]\n    active = .\n[remote "origin"]\n    #url = https://github.com/mdecourse/wcmj2020.git\n    url = git@github.com:mdecourse/wcmj2020.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch "master"]\n    remote = origin\n    merge = refs/heads/master\n[submodule "cmsimde"]\n    url = https://github.com/mdecourse/cmsimde.git \n (3)進入putty.exe 進行編輯 \n 設定代理主機 \n \n \n 設定代理主機(Proxy)\xa0 除非是IPV4 IPV6 \n \n 設定SSH的\xa0ppk private key (之前轉的APK) \n \n 之後就可以透過近端的 .ppk private key 與 Github.com 上的 public key 對應, 無需輸入帳號密碼就可以進行 git push \n \n', 'tags': '', 'url': '加入ssh.html'}, {'title': '網頁Cmsimde 建立方法', 'text': '(1)到github 新建一個repository(資料庫) \n \n (2)在隨身系統新建一個tmp資料夾 (wcm2020new/tmp) \n \n (3)到github網站git clone自己倉儲的網址clone完後git submodule add \n \n \n (4)進入cmsimde\xa0 把up_dir裡的東西全部複製 \n \n 放到cmsimde外面\xa0 wcm2020new的目錄下 \n \n (5)進入cmsimde目錄下\xa0 \xa0將wsgi.py拖入SciTE\xa0 \xa0 \xa0tools-->go \n', 'tags': '', 'url': '網頁Cmsimde 建立方法.html'}, {'title': '用@gm帳號建blog', 'text': '上google 搜尋 blog \n \n 登入自己的gmail \n \n 新建內容及網址 \n \n 建立完成 \n \n \n \n 網誌內容 完成 \n \n \n \n', 'tags': '', 'url': '用@gm帳號建blog.html'}, {'title': '如何在虛擬主機 git clone', 'text': '進入 VirtualBOX虛擬主機 \n \n 進入程式集 裡面的 Terminal \n \n \n 進入後輸入指令 \n \n \n 完成後進入 file(文件) \n \n 就可以看到裡面有github\xa0 \xa0wcm2020 和裡面的檔案 \n \n \n', 'tags': '', 'url': '如何在虛擬主機 git clone.html'}, {'title': 'Pelican建立Blog', 'text': '安裝markdown、leo 和 pelican \n \n 加入disqus(加入評論系統) \n \n 修改pelican的資料 \n 修改內容完先在靜端 執行\xa0 (對 local-blog 按右鍵-->go to script -->複製pelican markdown -o blog -s local_publishconf.py-->放入黑板 ) \n \n 設定 共用 \n \n 設定你的blog 的內容(標題、日期、名字) \n \n \n 如果要加圖片在blog 的話\xa0 \n <img src="\xa0 圖片網址 " width="400" height="350" alt="ub" align=center> \n 如果靜端沒問題就 git push \n blog 完成!!!! \n \n \n \n', 'tags': '', 'url': 'Pelican建立Blog.html'}]};